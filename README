Данная конфигурация позволяет развернуть комплекс виртуальных машин на CentOS 7 в провайдере Advanced Hosting (AH):
-Одна нода c ISCSI Target FileIO
- 3 ноды кластера Pacemaker с ISCSI Intiator, Multipath, GFS2
Настройка будет происходить через Ansible. 

Виртуальные машины будут развёрнуты с адресами из подсетей 192.168.1.0/24 и 192.168.2.0/24. 

Требования для запуска данной конфигурации: 
-Наличие Linux-машины
-Установленные пакеты Ansible и Terraform.
-Аккаунт в Advanced Hosting, c добавленым токеном и ssh fingerprint. 
-В аккаунте AH не должно быть заведено сетей 192.168.1.0/24 и 192.168.2.0/24.


Описание файлов:
-ansible.cfg - файл с конфигурацией Ansible
-main.tf - главный файл для terraform. Указываем наш провайдер и токен для работы с провайдером. 
-variables.tf - описание типов всех переменных
-vm.tf - файл, с описанием ВМ
-terraform.tfvars - файл, в котором хранятся все значения переменных. НУЖНО ЗАПОЛНИТЬ ПЕРЕД запуском команды terraform apply
-template.tf - сценарий, в котором содержится инструкция по выводу всех адресов в файл hosts
-output.tf - terraform-сценарий, который выводит нам IP-адрес созданной виртуальной машины
-provision.yml - Ansible-playbook для установки для развертывания кластера, ISCSI и GFS2.
-inventory.tpl - указываем формат файла hosts


Как развернуть виртуальную машину: 
1) На подготовленную Linux-машину копируем все файлы (main.tf, variables.tf, vm.tf, terraform.tfvars, template.tf, output.tf, provision.yml, inventory.tpl)
2) Открываем файл terraform.tfvars и вносим следующие значения параметров:
  -ah_dc - можно указать значение ams1 (Дата-центр в Амстердаме) или ash1 (Дата-центр в Америке)
  -ah_token - указываем значение из AH - API - Manage API access tokens
  -ah_machine_type - указываем тип машины, например "start-l" все типы можно посмотреть в  AH - API - Slugs - Cloud Servers
  -ah_image_type - "centos-7-x64", список всех образов можно посмотреть в AH - API - Slugs - Images

3) В файле vm.tf в разделе указываем fingerprint вашего ключа из AH - SSH KEYS

4) Находясь в каталоге, выполняем команду terraform plan. Данная команда поможет проверить, не было ли допущено ошибок

5) Выполняем команду terraform apply -auto-approve
Будет развернуто 2 ВМ на CentOS 7 и, с помощью Ansible, на первую машину будет установлен ISCSI Target, а на второрую - ISCSI Initiator с Multipath.


Проверка корректного выполнения скрипта:
Заходим на ВМ с ISCSI Initiator (ssh adminroot@<YOUR_IP_VM>) и вводим команду lsblk и pcs status вывод должен быть примерно следующим: 
[adminroot@wvds123991 ~]$ lsblk
NAME                      MAJ:MIN RM  SIZE RO TYPE  MOUNTPOINT
sda                         8:0    0 37.3G  0 disk  
└─sda1                      8:1    0 37.3G  0 part  /
sdb                         8:16   0    2G  0 disk  
└─mpatha                  253:0    0    2G  0 mpath 
  └─cluster_vg-cluster_lv 253:1    0  1.5G  0 lvm   /mnt/gfs2
sdc                         8:32   0    2G  0 disk  
└─mpatha                  253:0    0    2G  0 mpath 
  └─cluster_vg-cluster_lv 253:1    0  1.5G  0 lvm   /mnt/gfs2

[adminroot@wvds123991 ~]$ sudo pcs status
Cluster name: hacluster
Stack: corosync
Current DC: node2 (version 1.1.23-1.el7_9.1-9acf116022) - partition with quorum
Last updated: Mon Feb 22 19:36:33 2021
Last change: Mon Feb 22 19:35:29 2021 by root via cibadmin on node1

3 nodes configured
9 resource instances configured

Online: [ node1 node2 node3 ]

Full list of resources:

 Clone Set: dlm-clone [dlm]
     Started: [ node1 node2 node3 ]
 Clone Set: clvmd-clone [clvmd]
     Started: [ node1 node2 node3 ]
 Clone Set: clusterfs-clone [clusterfs]
     Started: [ node1 node2 node3 ]

Daemon Status:
  corosync: active/enabled
  pacemaker: active/enabled
  pcsd: active/enabled

Также можно выключить одну виртуальную машину, доступ к каталогу /mnt/gfs2 не должен прерваться на остальных машинах.

Удаление ВМ:
Для удаления ВМ достаточно ввести команду: terraform destroy -auto-approve